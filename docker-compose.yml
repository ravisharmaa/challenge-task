version: '3.4'

services:
  proxy:
    image: "traefik:latest"
    restart: always
    container_name: proxy
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=teamway-task_default"
      - "--entrypoints.web.address=:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  app:
    build:
      context: ./docker/php
      dockerfile: Dockerfile
      args:
          - UID=${UID:-1000}
          - GID=${GID:-1000}
    container_name: teamway-app
    restart: unless-stopped
    tty: true
    working_dir: /var/www/
    depends_on:
      - composer
    volumes:
      - ./:/var/www

  webserver:
    build:
        context: ./docker/nginx
        dockerfile: nginx.dockerfile
        args:
            - UID=${UID:-1000}
            - GID=${GID:-1000}
            - FPM_HOST=teamway-app
    container_name: teamway-app-server
    restart: unless-stopped
    tty: true
    depends_on:
      - app
      - mysql
    volumes:
      - ./:/var/www
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.teamway.rule=Host(`${APP_DOMAIN}`)"
      - "traefik.http.routers.teamway.entrypoints=web"
      - "traefik.http.routers.teamway.service=teamway-service"
      - "traefik.http.services.teamway-service.loadbalancer.server.port=80"
      - "traefik.docker.network=teamway-task_default"
      - "traefik.port=80"
  mysql:
      image: mysql:5.7
      container_name: teamway-db
      restart: unless-stopped
      tty: true
      ports:
          - "3306:3306"
      environment:
          MYSQL_DATABASE: ${DB_DATABASE}
          MYSQL_USER: ${DB_USERNAME}
          MYSQL_PASSWORD: ${DB_PASSWORD}
          MYSQL_ROOT_PASSWORD: secret
      volumes:
          - db:/var/lib/mysql
      env_file:
          - .env
  composer:
    restart: 'no'
    build:
      context: ./docker/composer
      dockerfile: composer.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    command: install --ignore-platform-reqs
    volumes:
      - .:/app

volumes:
  db:
    driver: local
